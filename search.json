[{"title":"IOC与DI","url":"/blog/2020/08/03/IOC%E4%B8%8EDI/","content":"<h1 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h1><p>IOC即<strong>控制反转</strong>(Inversion of Control)，是<strong>依赖倒置原则</strong>(Dependency Inversion Principle，软件设计五大原则之一)一种代码设计的思路。具体实现方式为<strong>依赖注入</strong>(Dependency Injection, DI)。三者具体关系为：</p>\n<p>依赖倒置原则 –&gt; 控制反转(设计思路) –&gt; 依赖注入(具体实现思路)</p>\n<a id=\"more\"></a>\n\n<p><strong>何为依赖倒置原则？Robert C. Martin给出的定义如下：</strong></p>\n<blockquote>\n<p>高层模块不应该依赖于底层模块，二者都应该依赖于抽象</p>\n<p>抽象不应该依赖于细节，细节应该依赖于抽象</p>\n</blockquote>\n<p>术语较为晦涩难懂，举个栗子：</p>\n<p><img src=\"/blog/2020/08/03/IOC%E4%B8%8EDI/%E6%B1%BD%E8%BD%A6%E4%BE%9D%E8%B5%96%E8%BD%AE%E8%83%8E.png\" alt=\"preview\"></p>\n<p>当设计汽车时，先设计轮胎，然后底盘依赖设计好的轮胎进行设计，直至设计好整个汽车。而此时当轮胎需要变化时，地盘需要跟着变化进而适应轮胎的变化，进而整个汽车都需要变化。</p>\n<p>我们换一种思路</p>\n<p><img src=\"/blog/2020/08/03/IOC%E4%B8%8EDI/%E8%BD%AE%E8%83%8E%E4%BE%9D%E8%B5%96%E6%B1%BD%E8%BD%A6.png\" alt=\"preview\"></p>\n<p>如果先设计整个汽车概况，然后根据汽车概况设计车身，然后设计地盘、轮胎，此时整个依赖链条发生了反转，当轮胎发生变化时，只需要重新设计轮胎即可。<strong>这就是依赖反转的过程！</strong></p>\n<p><strong>下面用代码来说明:</strong></p>\n<p>实体类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//汽车类(依赖车架)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Framework framework;<span class=\"comment\">//车架</span></span><br><span class=\"line\">  Car() &#123;<span class=\"keyword\">this</span>.framework = <span class=\"keyword\">new</span> framework();&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//车架类(依赖底盘)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Framework</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Bottom bottom;</span><br><span class=\"line\">  Framework()&#123;<span class=\"keyword\">this</span>.bottom = <span class=\"keyword\">new</span> Bottom();&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//底盘类(依赖轮胎)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bottom</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Tire tire;</span><br><span class=\"line\">  Bottom()&#123;<span class=\"keyword\">this</span>.tire = <span class=\"keyword\">new</span> Tire();&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//轮胎类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tire</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">  Tire()&#123;<span class=\"keyword\">this</span>.size = <span class=\"number\">10</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实例化一个汽车对象, 并执行run方法</span></span><br><span class=\"line\">Car car = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">car.run();</span><br></pre></td></tr></table></figure>\n\n<p>此时依赖关系为Car -&gt; Framework -&gt; Bottom -&gt;Tire，若此时业务需求发生了变化，需自定义轮胎尺寸，即Tire类size属性根据参数初始化。则上述代码需要修改。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//首先修改轮胎类</span></span><br><span class=\"line\">Class Tire&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">  Tire(<span class=\"keyword\">int</span> size)&#123;<span class=\"keyword\">this</span>.size = size;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//然后需要修改底盘类(依赖轮胎)</span></span><br><span class=\"line\">Class Bottom&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Tire tire;</span><br><span class=\"line\">  Bottom(<span class=\"keyword\">int</span> tireSize)&#123;<span class=\"keyword\">this</span>.tire = <span class=\"keyword\">new</span> Tire(tireSize);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//进而修改车架类(依赖底盘)</span></span><br><span class=\"line\">Class Framework&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Bottom bottom;</span><br><span class=\"line\">  Framework(<span class=\"keyword\">int</span> tireSize)&#123;<span class=\"keyword\">this</span>.bottom = <span class=\"keyword\">new</span> Bottom(tireSize);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最后修改汽车类(依赖车架)</span></span><br><span class=\"line\">Class Car &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Framework framework;<span class=\"comment\">//车架</span></span><br><span class=\"line\">  Car(<span class=\"keyword\">int</span> tireSize) &#123;<span class=\"keyword\">this</span>.framework = <span class=\"keyword\">new</span> Framework(tireSize);&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实例化一个轮胎尺寸为30的汽车对象, 并执行run方法</span></span><br><span class=\"line\">Car car = <span class=\"keyword\">new</span> Car(<span class=\"number\">30</span>);</span><br><span class=\"line\">car.run();</span><br></pre></td></tr></table></figure>\n\n<p>这种高层依赖底层的依赖关系，底层模块发生变化，高层模块都要随之变化，可谓牵一发而动全身，维护成本极高。违反了依赖导致原则。要遵守依赖导致原则，达到控制反转，通常使用依赖注入的方式来实现，具体有<strong>构造方法注入</strong>、<strong>setter方法注入</strong>、<strong>接口注入</strong>三种实现方法，构造方法注入、setter方法注入适用于链式依赖关系（如本例）。接口注入适用于星型依赖关系。下面尝试使用构造方法注入、setter方法注入对本例进行改造。</p>\n<ul>\n<li><strong>构造方法注入</strong></li>\n</ul>\n<p>实体类改造</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//汽车类(构造时需注入Framework属性)</span></span><br><span class=\"line\">Class Car &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Framework framework;<span class=\"comment\">//车架</span></span><br><span class=\"line\">  Car(Framework framework) &#123;<span class=\"keyword\">this</span>.framework = framework;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//车架类(构造时需注入Bottom属性)</span></span><br><span class=\"line\">Class Framework&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Bottom bottom;</span><br><span class=\"line\">  Framework(Bottom bottom)&#123;<span class=\"keyword\">this</span>.bottom = bottom;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//底盘类(构造时需注入tire属性)</span></span><br><span class=\"line\">Class Bottom&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Tire tire;</span><br><span class=\"line\">  Bottom(Tire tire)&#123;<span class=\"keyword\">this</span>.tire = tire;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//轮胎类</span></span><br><span class=\"line\">Class Tire&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">  Tire()&#123;<span class=\"keyword\">this</span>.size = <span class=\"number\">10</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    构造Car对象需要注入Framework对象，构造Framework对象需要注入Bottom对象，构造Bottom对象需要Tire对象，所以要先构造底层Tire对象，逐步向高层注入。进而实现了控制反转。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">Tire tire = <span class=\"keyword\">new</span> Tire(<span class=\"number\">40</span>);</span><br><span class=\"line\">Bottom bottom = <span class=\"keyword\">new</span> Bottom(tire);</span><br><span class=\"line\">Framework framework = <span class=\"keyword\">new</span> Framework(bottom);</span><br><span class=\"line\">Car car = <span class=\"keyword\">new</span> Car(framework);</span><br><span class=\"line\">car.run();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Setter方法注入</strong></li>\n</ul>\n<p>实体类改造</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//汽车类(添加framework属性的setter方法)</span></span><br><span class=\"line\">Class Car &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Framework framework;<span class=\"comment\">//车架</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFramework</span><span class=\"params\">(Framework framework)</span> </span>&#123;<span class=\"keyword\">this</span>.framework = framework;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//车架类(添加bottom属性的setter方法)</span></span><br><span class=\"line\">Class Framework&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Bottom bottom;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBottom</span><span class=\"params\">(Bottom bottom)</span></span>&#123;<span class=\"keyword\">this</span>.bottom = bottom;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//底盘类(添加Tire属性的setter方法)</span></span><br><span class=\"line\">Class Bottom&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Tire tire;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTire</span><span class=\"params\">(Tire tire)</span></span>&#123;<span class=\"keyword\">this</span>.tire = tire;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//轮胎类</span></span><br><span class=\"line\">Class Tire&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">  Tire()&#123;<span class=\"keyword\">this</span>.size = <span class=\"number\">10</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//setter注入与构造器方法类似</span></span><br><span class=\"line\">Tire tire = <span class=\"keyword\">new</span> Tire(<span class=\"number\">40</span>);</span><br><span class=\"line\">Bottom bottom = <span class=\"keyword\">new</span> Bottom();</span><br><span class=\"line\">bottom.setTire(tire);</span><br><span class=\"line\">Framework framework = <span class=\"keyword\">new</span> Framework();</span><br><span class=\"line\">framework.setBottom(bottom);</span><br><span class=\"line\">Car car = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">car.setFramework(framework);</span><br><span class=\"line\">car.run();</span><br></pre></td></tr></table></figure>\n\n<p><strong>下面举一个接口注入的例子</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//person类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> BenzCar myBenz;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">setMyBenz</span><span class=\"params\">(BenzCar myBenz)</span> </span>&#123;<span class=\"keyword\">this</span>.myBenz = myBenz;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">driveBenz</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.myBenz.run()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//BenzCar类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenzCar</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name = <span class=\"string\">&quot;Benz&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.Out.Println(<span class=\"keyword\">this</span>.name + <span class=\"string\">&quot; is running&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//人驾驶奔驰</span></span><br><span class=\"line\">Person ps = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">ps.setMyBenz(<span class=\"keyword\">new</span> BenzCar())</span><br><span class=\"line\">ps.driveBenz()</span><br></pre></td></tr></table></figure>\n\n<p>上述例子Person类依赖BenzCar类，当需求增加人驾驶宝马车，则不仅要添加宝马类，还要对Person类修改，上述代码则变为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//person类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> BenzCar myBenz;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> BMWCar myBMW;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">setMyBenz</span><span class=\"params\">(BenzCar myBenz)</span> </span>&#123;<span class=\"keyword\">this</span>.myBenz = myBenz;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">setMyBMW</span><span class=\"params\">(BMWCar myBMW)</span> </span>&#123;<span class=\"keyword\">this</span>.myBMW = myBMW;&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">driveBenz</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.myBenz.run()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">driveBMW</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.myBMW.run()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//BenzCar类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenzCar</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name = <span class=\"string\">&quot;Benz&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.Out.Println(<span class=\"keyword\">this</span>.name + <span class=\"string\">&quot; is running&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//BMWCar类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWCar</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name = <span class=\"string\">&quot;BMW&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">this</span>.name + <span class=\"string\">&quot; is running&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//人驾驶宝马</span></span><br><span class=\"line\">Person ps = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">ps.setMyBMW(<span class=\"keyword\">new</span> BMWCar())</span><br><span class=\"line\">ps.driveBMW()</span><br></pre></td></tr></table></figure>\n\n<p>上述设计每次新增一个汽车类型，都要重新修改Person代码，违反了开闭原则、依赖倒置原则。下面使用<strong>接口注入</strong>方法进行重构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//定义Car接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Car</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//BenzCar类实现Car接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenzCar</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BenzCar</span><span class=\"params\">(String name)</span> </span>&#123;<span class=\"keyword\">this</span>.name = name;&#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   System.out.println(<span class=\"keyword\">this</span>.name + <span class=\"string\">&quot;is running&quot;</span>); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//BMWCar类实现Car接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWCar</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BMWCar</span><span class=\"params\">(String name)</span> </span>&#123;<span class=\"keyword\">this</span>.name = name;&#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">   System.out.println(<span class=\"keyword\">this</span>.name + <span class=\"string\">&quot;is running&quot;</span>); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Person类针对接口编程</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> Car car;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">setCar</span><span class=\"params\">(Car car)</span> </span>&#123;<span class=\"keyword\">this</span>.car = car;&#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">drive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.car.run()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//业务调用</span></span><br><span class=\"line\">Person ps1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Person ps2 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"comment\">//人驾驶奔驰</span></span><br><span class=\"line\">Car benzCar = <span class=\"keyword\">new</span> BenzCar(myBenz);</span><br><span class=\"line\">ps1.setCar(benzCar);</span><br><span class=\"line\">ps1.drive();</span><br><span class=\"line\"><span class=\"comment\">//人驾驶宝马</span></span><br><span class=\"line\">Car bmwCar = <span class=\"keyword\">new</span> BMWCar(myBMW);</span><br><span class=\"line\">ps2.setCar(bmwCar);</span><br><span class=\"line\">ps2.drive();</span><br></pre></td></tr></table></figure>\n\n<p>Person类针对Car接口进行编程，当业务增加了新的车型时，只需要对Car接口进行实现即可，无需修改原有代码，减少了维护的成本。</p>\n","categories":["Java"],"tags":["Spring"]},{"title":"Synchronized用法","url":"/blog/2020/08/10/Synchronized%E7%94%A8%E6%B3%95/","content":"<h1 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h1><p>本文主要介绍Java中Synchronized关键字应用场景以及基本用法。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h1><p>先来看一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedTest</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 共享变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span>  <span class=\"keyword\">void</span>  <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自加10000次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        countDownLatch.countDown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        SynchronizedTest synchronizedTest = <span class=\"keyword\">new</span> SynchronizedTest();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            Thread thread = <span class=\"keyword\">new</span> Thread(synchronizedTest);</span><br><span class=\"line\">            thread.start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 只有10个线程全部执行完(countDownLatch.getCount() == 0)才会唤醒主线程继续执行</span></span><br><span class=\"line\">        countDownLatch.await();</span><br><span class=\"line\">        System.out.print(count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">70188</span></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>这段代码有一个共享变量<code>count</code>，然后创建10个线程同时对这个共享变量自加10000次，而<code>count</code>最终的值并不是10 * 10000，这是由于多个线程同时写共享变量产生了并发问题，而使用<code>syncronized</code>关键字可以很好的解决这样的问题。<code>syncronized</code>可以对一段代码加锁（只有持有锁的线程可以访问该段代码）。</p>\n<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><p>这里要提出两个概念:</p>\n<p>​    <code>syncronized</code>的作用对象：首先记住一个大原则，<code>syncronized</code>总是针对对象加锁的，多个线程调用同一个对象的加锁方法(代码块)会产生竞争，同一时刻只有一个线程会持有锁。</p>\n<p>​    <code>syncronized</code>的作用范围：<code>syncronized</code>有不同的修饰范围，<code>syncronized</code>作用于其修饰的方法、代码块。</p>\n<ul>\n<li><p>修饰代码块</p>\n<p>还是上面的例子，对自加部分代码块使用<code>syncronized</code>修饰。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 共享变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 自加10000次</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> SynchronizedTest synchronizedTest = <span class=\"keyword\">new</span> SynchronizedTest();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 每次调用相同对象的方法</span></span><br><span class=\"line\">                    synchronizedTest.add();</span><br><span class=\"line\">                    countDownLatch.countDown();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 只有10个线程全部执行完(countDownLatch.getCount() == 0)才会唤醒主线程继续执行</span></span><br><span class=\"line\">        countDownLatch.await();</span><br><span class=\"line\">        System.out.print(count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">100000</span></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>需要指定加锁对象，若指定为<code>this</code>，则表示当前对象，同一时刻只有一个线程(持有该对象的锁)可以进入<code>synchronized</code>代码块，则不会产生并发问题。<code>count</code>最终结果为100000。</p>\n<p>当每个线程访问不同对象的加锁代码块时：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 共享变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 自加10000次</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 每次创建新的对象</span></span><br><span class=\"line\">                    <span class=\"keyword\">new</span> SynchronizedTest().add();</span><br><span class=\"line\">                    countDownLatch.countDown();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 只有10个线程全部执行完(countDownLatch.getCount() == 0)才会唤醒主线程继续执行</span></span><br><span class=\"line\">        countDownLatch.await();</span><br><span class=\"line\">        System.out.print(count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">94917</span></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看出，此时<code>count</code>并非100000，说明产生了并发问题，这也印证了前面所说<code>synchronized</code>是针对对象进行加锁。</p>\n</li>\n<li><p>修饰实例方法</p>\n<p>实例方法：属于某个对象的方法。需要创建对象才可以调用。</p>\n<p>静态方法：使用<code>static</code>关键字进行修饰，属于整个类的方法，直接可以通过类名进行调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 共享变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自加10000次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> SynchronizedTest synchronizedTest = <span class=\"keyword\">new</span> SynchronizedTest();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    synchronizedTest.add();</span><br><span class=\"line\">                    countDownLatch.countDown();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 只有10个线程全部执行完(countDownLatch.getCount() == 0)才会唤醒主线程继续执行</span></span><br><span class=\"line\">        countDownLatch.await();</span><br><span class=\"line\">        System.out.print(count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">100000</span></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>由于实例方法属于某个对象的方法，故<code>synchronized</code>修饰实例方法加锁对象为当前对象。从结果可以看出，并没有产生并发问题，表示加锁成功。</p>\n</li>\n<li><p>修饰静态方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 共享变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自加10000次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    SynchronizedTest.add();</span><br><span class=\"line\">                    countDownLatch.countDown();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 只有10个线程全部执行完(countDownLatch.getCount() == 0)才会唤醒主线程继续执行</span></span><br><span class=\"line\">        countDownLatch.await();</span><br><span class=\"line\">        System.out.print(count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">100000</span></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p><code>synchronized</code>修饰静态方法，作用对象为当前类.class，即在类级别上加锁。此时执行即使不同的对象的加锁方法(代码块)还是会竞争锁。</p>\n</li>\n</ul>\n<h1 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h1><p><code>synchronized</code>修饰代码块: 作用对象为修饰对象。</p>\n<p><code>synchronized</code>修饰实例方法：作用对象为当前对象。</p>\n<p><code>synchronized</code>修饰静态方法：作用对象为当前类.class。</p>\n","categories":["Java"],"tags":["JUC"]},{"title":"Explain执行计划概述","url":"/blog/2020/08/08/Explain%E8%AF%A6%E8%A7%A3/","content":"<h3 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h3><p>Explain执行计划可以帮助我们检查Sql的性能。本文主要介绍Explain中各个字段以及每个字段的含义。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Explain中的列\"><a href=\"#Explain中的列\" class=\"headerlink\" title=\"Explain中的列\"></a>Explain中的列</h3><ul>\n<li><p><strong>id</strong></p>\n<p>id列的编号是 select 的序列号，id值越大表示该select越先执行，id相同顺序执行。</p>\n</li>\n<li><p><strong>select_type</strong></p>\n<ol>\n<li><p><strong>simple</strong>: 简单查询。查询不包含子查询和union</p>\n</li>\n<li><p><strong>primary</strong>: 主查询。即最外层select</p>\n</li>\n<li><p><strong>subquery</strong>: 子查询（相对于主查询），主查询select中的查询（不在from中)。</p>\n</li>\n<li><p><strong>derived</strong>: 衍生查询（相对于主查询），主查询from中的查询。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> (<span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">from</span> actor <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span>) <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> film <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/blog/2020/08/08/Explain%E8%AF%A6%E8%A7%A3/select_type.png\" alt=\"image-20200725123609130\"></p>\n</li>\n<li><p><strong>union</strong>: 在 union 中的第二个和随后的 select</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span> <span class=\"keyword\">union</span> <span class=\"keyword\">all</span> <span class=\"keyword\">select</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/blog/2020/08/08/Explain%E8%AF%A6%E8%A7%A3/select_type_union.png\" alt=\"image-20200725124107619\"></p>\n</li>\n</ol>\n</li>\n<li><p><strong>type</strong></p>\n<p><strong>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</strong></p>\n<ol>\n<li><p><strong>Null</strong>: mysql能够在优化阶段分解查询语句，在执行阶段用不着再访问表或索引。例如：在索引列中选取最小值，可以单独查找索引来完成，不需要在执行时访问表。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> <span class=\"keyword\">min</span>(<span class=\"keyword\">id</span>) <span class=\"keyword\">from</span> film;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/blog/2020/08/08/Explain%E8%AF%A6%E8%A7%A3/type_Null.png\" alt=\"image-20200725125428161\"></p>\n</li>\n<li><p><strong>system</strong>: 表里只有一行记录  </p>\n</li>\n<li><p><strong>const</strong>: primary key 或 unique key 的所有列与常数比较时，表最多有一个匹配行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">extended</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> film <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">1</span>) tmp;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/blog/2020/08/08/Explain%E8%AF%A6%E8%A7%A3/type_const&system.png\" alt=\"image-20200725130209724\"></p>\n</li>\n<li><p><strong>eq_ref</strong>: 关联查询时，primary key 或 unique key 索引的所有部分被连接使用 ，最多只会返回一条符合条件的记录，==简单的 select 查询不会出现这种 type==。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> film_actor <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> film <span class=\"keyword\">on</span> film_actor.film_id = film.id;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/blog/2020/08/08/Explain%E8%AF%A6%E8%A7%A3/type_eq_ref.png\" alt=\"image-20200725131337441\"></p>\n</li>\n<li><p><strong>ref</strong>: 不使用唯一索引(使用普通索引或唯一索引的部分前缀)，可能返回多条记录。</p>\n<p>简单查询（name为普通索引）：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> film <span class=\"keyword\">where</span> <span class=\"keyword\">name</span> = <span class=\"string\">&#x27;film1&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/blog/2020/08/08/Explain%E8%AF%A6%E8%A7%A3/type_ref.png\" alt=\"image-20200725131909090\"></p>\n<p>关联表查询(idx_film_actor_id是film_id和actor_id的联合索引，只用到前缀film_id)：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> film_id <span class=\"keyword\">from</span> film <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> film_actor <span class=\"keyword\">on</span> film.id = film_actor.film_id;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/blog/2020/08/08/Explain%E8%AF%A6%E8%A7%A3/type_ref2.png\" alt=\"image-20200725132053796\"></p>\n</li>\n<li><p><strong>range</strong>: 范围查找，范围扫描通常出现在 in(), between ,&gt; ,&lt;, &gt;= 等操作中，被检索行使用索引。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> actor <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt; <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/blog/2020/08/08/Explain%E8%AF%A6%E8%A7%A3/type_range.png\" alt=\"image-20200725132452486\"></p>\n</li>\n<li><p><strong>index</strong>: 查询全表时，若辅助索引树中包含所有查询字段，则去辅助索引中查询所有索引（数据量较少），称之为覆盖索引(Full Index Scan)。用到索引，但是只是遍历索引(叶子)，效率低。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> film;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/blog/2020/08/08/Explain%E8%AF%A6%E8%A7%A3/type_index.png\" alt=\"image-20200725133604417\"></p>\n</li>\n<li><p><strong>All</strong>: 全表扫描，扫描聚簇索引，遍历聚簇索引的叶子。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> actor;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/blog/2020/08/08/Explain%E8%AF%A6%E8%A7%A3/type_ALl.png\" alt=\"image-20200725134347648\"></p>\n</li>\n</ol>\n</li>\n<li><p><strong>possible_keys</strong></p>\n<p>可能使用的索引。explain 时可能出现 possible_keys 有列，而 key 显示 NULL 的情况，这种情况是因为表中数据不多，mysql认为索引对此查询帮助不大，选择了全表查询。</p>\n</li>\n<li><p><strong>key列</strong></p>\n<p>这一列显示mysql实际采用哪个索引来优化对该表的访问。</p>\n</li>\n<li><p><strong>key_len</strong></p>\n<p>使用索引的字节总数，通过这个值可以算出具体使用了(联合)索引中的哪些列。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> film_actor <span class=\"keyword\">where</span> film_id = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/blog/2020/08/08/Explain%E8%AF%A6%E8%A7%A3/mysql_%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95.png\" alt=\"image-20200725135045988\"></p>\n<p>film_actor的联合索引 idx_film_actor_id 由 film_id 和 actor_id 两个int列组成，并且每个int是4字节。通过结果中的key_len=4可推断出查询使用了第一个列：film_id列来执行索引查找。</p>\n<ol>\n<li><p><strong>计算规则</strong></p>\n<p><strong>字符串</strong>：</p>\n<p>​    char(n)：n字节长度</p>\n<p>​    varchar(n)：如果是utf-8，则长度 3n + 2 字节，加的2字节用来存储字符串长度</p>\n<p><strong>数值类型</strong>：</p>\n<p>​    tinyint：1字节</p>\n<p>​    smallint：2字节</p>\n<p>​    int：4字节</p>\n<p>​    bigint：8字节　　</p>\n<p><strong>时间类型</strong>：</p>\n<p>​    date：3字节</p>\n<p>​    timestamp：4字节</p>\n<p>​    datetime：8字节</p>\n<p>如果字段允许为 NULL，需要1字节记录是否为 NULL</p>\n</li>\n</ol>\n</li>\n<li><p><strong>ref</strong></p>\n<p>这一列显示了在key列记录的索引中，表查找值所用到的列或常量，常见的有：const（常量），字段名（例：film.id）</p>\n</li>\n<li><p><strong>rows</strong></p>\n<p>这一列是mysql估计要读取并检测的行数，注意这个不是结果集里的行数。</p>\n</li>\n<li><p><strong>Extra</strong></p>\n<p>这一列展示的是额外信息。常见的重要值如下：</p>\n<ol>\n<li><p><strong>Using index</strong>: 使用覆盖索引(结果集在辅助索引树中全部包含)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> film_id <span class=\"keyword\">from</span> film_actor <span class=\"keyword\">where</span> film_id = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/blog/2020/08/08/Explain%E8%AF%A6%E8%A7%A3/Extra.png\" alt=\"image-20200725140417461\"></p>\n<p>问题：为什么这个type不是index而是ref？</p>\n<p>答：因为这个查询的不是全表数据。</p>\n</li>\n<li><p><strong>Using where</strong>: 表示MySQL服务器在存储引擎收到记录后进行“后过滤”（Post-filter）,如果查询未能使用索引，Using where的作用只是提醒我们==MySQL将用where子句来过滤结果集==。这个==一般发生在MySQL服务器，而不是存储引擎层==。一般发生在不能走索引扫描的情况下或者走索引扫描，但是有些查询条件不在索引当中的情况下。</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; explain select * from actor where name = &#x27;a&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/blog/2020/08/08/Explain%E8%AF%A6%E8%A7%A3/Extra_Using_where.png\" alt=\"image-20200725141016636\"></p>\n</li>\n<li><p><strong>Using index condition</strong>: 查询的列不完全被索引覆盖，where条件中是一个前导列的范围；</p>\n</li>\n<li><p><strong>Using temporary</strong>: 用到临时表</p>\n</li>\n<li><p><strong>Using filesort</strong>:  MySQL中无法利用索引完成的排序操作称为“文件排序”</p>\n</li>\n<li><p><strong>Select tables optimized away</strong>: 使用某些聚合函数（比如 max、min）来访问存在索引的某个字段.</p>\n</li>\n</ol>\n</li>\n</ul>\n<p><a href=\"http://fivezh.github.io/2020/01/19/mysql-icp/?utm_source=tuicool&amp;utm_medium=referral\">http://fivezh.github.io/2020/01/19/mysql-icp/?utm_source=tuicool&amp;utm_medium=referral</a></p>\n<p><a href=\"https://www.cnblogs.com/kerrycode/p/9909093.html\">https://www.cnblogs.com/kerrycode/p/9909093.html</a></p>\n","categories":["Mysql"],"tags":["Mysql"]},{"title":"MySQL锁与事务","url":"/blog/2020/08/08/MySQL%E9%94%81%E4%B8%8E%E4%BA%8B%E5%8A%A1/","content":"<h1 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h1><p>本文主要介绍Mysql中几种锁的概念，以及Mysql事物相关原理。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"MySQL锁与事务\"><a href=\"#MySQL锁与事务\" class=\"headerlink\" title=\"MySQL锁与事务\"></a>MySQL锁与事务</h1><p>本笔记主要针对InnoDB引擎</p>\n<h2 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h2><p>锁是区分数据库区别于文件系统的一个关键特性。</p>\n<h3 id=\"lock与latch\"><a href=\"#lock与latch\" class=\"headerlink\" title=\"lock与latch\"></a>lock与latch</h3><p>二者区别：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Lock</th>\n<th>Latch</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>对象</td>\n<td>事务</td>\n<td>线程</td>\n</tr>\n<tr>\n<td>保护</td>\n<td>数据库内容</td>\n<td>内存数据结构</td>\n</tr>\n<tr>\n<td>持续时间</td>\n<td>整个事务过程</td>\n<td>临界资源访问过程</td>\n</tr>\n<tr>\n<td>模式</td>\n<td>行锁、表锁、意向锁</td>\n<td>读写锁、互斥量</td>\n</tr>\n<tr>\n<td>死锁</td>\n<td>通过waits-for graph、timeout等级制检测与处理</td>\n<td>无检测与处理机制</td>\n</tr>\n<tr>\n<td>存在于</td>\n<td>Lock Manager的哈希表中</td>\n<td>每个数据结构的对象中</td>\n</tr>\n</tbody></table>\n<p>latch相当于内存的锁，lock相当于数据库对象(表、行等)的锁。比如数据缓存中的某个块要被读取，我们会获得这个块的latch。这个过程叫做pin，另外一个进程恰好要修改这个块，他也要pin这个块，此时他必须等待。</p>\n<h3 id=\"lock锁类型\"><a href=\"#lock锁类型\" class=\"headerlink\" title=\"lock锁类型\"></a>lock锁类型</h3><ul>\n<li><p>共享锁(S Lock)：允许事务读一行数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 事务要获取某些行的 S 锁，必须先获得表的 IS 锁。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">column</span> <span class=\"keyword\">FROM</span> <span class=\"keyword\">table</span> ... <span class=\"keyword\">LOCK</span> <span class=\"keyword\">IN</span> <span class=\"keyword\">SHARE</span> <span class=\"keyword\">MODE</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>排他锁(X Lock)：允许事务删除或更新一行数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 事务要获取某些行的 X 锁，必须先获得表的 IX 锁。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> <span class=\"keyword\">users</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> = <span class=\"number\">6</span> <span class=\"keyword\">FOR</span> <span class=\"keyword\">UPDATE</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>意向共享锁(IS Lock)：事务想要获得一张表中某几行的共享锁</p>\n</li>\n<li><p>意向拍他锁(IS Lock)：事务想要获得一张表中某几行的排他锁</p>\n</li>\n</ul>\n<p>意向锁与行级锁的兼容性：指对同一记录(row)锁的兼容性情况</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>IS</th>\n<th>IX</th>\n<th>S</th>\n<th>X</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IS</td>\n<td>兼容</td>\n<td>兼容</td>\n<td>兼容</td>\n<td>兼容</td>\n</tr>\n<tr>\n<td>IX</td>\n<td>兼容</td>\n<td>兼容</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>S</td>\n<td>兼容</td>\n<td>不兼容</td>\n<td>兼容</td>\n<td>不兼容</td>\n</tr>\n<tr>\n<td>X</td>\n<td>不兼容</td>\n<td>不兼容</td>\n<td>不兼容</td>\n<td>不兼容</td>\n</tr>\n</tbody></table>\n<p>意向锁为表级锁，是由S、X行锁触发。故研究其与行锁的兼容性其实意义不大。百度百科中意向锁的意义：</p>\n<blockquote>\n<p>如果另一个任务试图在该表级别上应用共享或排它锁，则受到由第一个任务控制的表级别意向锁的阻塞。第二个任务在锁定该表前不必检查各个页或行锁，而只需检查表上的意向锁。</p>\n</blockquote>\n<p>意向锁是为了解决行锁与==表锁==(Mysql Server提供，非InnoDB)之间互斥关系而存在的。如：</p>\n<p>事务 A 获取了某一行的排他锁</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-- 会先获取表的IX锁</span><br><span class=\"line\">SELECT * FROM users WHERE id &#x3D; 6 FOR UPDATE;</span><br></pre></td></tr></table></figure>\n\n<p>事务 B 想要获取该行对应表的表锁：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">LOCK TABLES users READ;</span><br></pre></td></tr></table></figure>\n\n<p>由于该表存在IX锁，与表锁互斥，所以事务B需等待事务A释放IX锁才能获取到表锁。</p>\n<h3 id=\"行锁的3种算法\"><a href=\"#行锁的3种算法\" class=\"headerlink\" title=\"行锁的3种算法\"></a>行锁的3种算法</h3><p>InnoDB有3种行锁的算法：</p>\n<ul>\n<li><p>Record Lock: 行锁。==锁的索引，而非自身==。若没设置索引，则会使用隐式的主键(聚簇索引)来进行锁定。</p>\n</li>\n<li><p>Gap Lock: 间隙锁。锁定记录(索引)之间的范围，但不包含记录(索引)本身。</p>\n</li>\n<li><p>Next-Key Lock: Gap Lock + Record Lock，锁定范围并锁定记录(索引)本身</p>\n<p>如一个索引字段包含1、3、5、8，11几个值，则可能被锁定的区间为：</p>\n<p>(负无穷, 1]</p>\n<p>(1, 3]</p>\n<p>(3, 5]</p>\n<p>(5, 8]</p>\n<p>(8, 11]</p>\n<p>(11, 正无穷)</p>\n<ul>\n<li>若执行update account set name = ‘wang’ where id &gt; 7 and id &lt;10(锁住8～18)</li>\n</ul>\n</li>\n</ul>\n<p>  则被锁定区间为[5, 11)，因为7～10跨越了几个区间。</p>\n<ul>\n<li><p>若执行select * from film where name = 8 for update;</p>\n<p>则锁定区间为[5,11)，next-key会锁住当前值所在区间，并对下一个键值加gap lock。</p>\n<p>即插入5、6、7、8、9、10被阻塞、11不会阻塞(亲测)</p>\n<p>问题：为什么锁区间是左开右闭，测试明明是左闭右开</p>\n</li>\n</ul>\n<ul>\n<li>Next-Key Lock优化：当查询的索引含有唯一属性的时候，Next-Key Lock 会进行优化，将其降级为Record Lock，即仅锁住索引本身，不是范围。</li>\n</ul>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>innodb支持事务，myisim不支持事务。</p>\n<h3 id=\"事务的基本特性\"><a href=\"#事务的基本特性\" class=\"headerlink\" title=\"事务的基本特性\"></a>事务的基本特性</h3><p>理论上说，事务必须同时满足四个特性。</p>\n<ul>\n<li><p>原子性(atomicity)</p>\n<p>事务中的所有操作，要么都做，要么都不做。</p>\n</li>\n<li><p>一致性(consistency)</p>\n<p>事务在执行前后数据库的状态保持一致，完整性约束没有被破坏。</p>\n</li>\n<li><p>隔离性(isolation)</p>\n<p>事务提交前对其他事务不可见。通常使用锁来实现。</p>\n</li>\n<li><p>持久性(durability)</p>\n<p>一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。</p>\n</li>\n</ul>\n<h3 id=\"并发一致性问题\"><a href=\"#并发一致性问题\" class=\"headerlink\" title=\"并发一致性问题\"></a>并发一致性问题</h3><ul>\n<li><p>丢失修改</p>\n<p>T1 和 T2 两个事务都对一个数据进行修改，T1 先修改，T2 随后修改，T2 的修改覆盖了 T1 的修改。（改改—没改完就改）</p>\n<p><strong>解决：一级封锁协议</strong></p>\n<p>​        事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。</p>\n<p><strong>问题：</strong>在一级封锁协议中，如果仅仅是读数据不对其进行修改，是不需要加锁的，所以它不能保证可重复读和不读“脏”数据（2）。</p>\n</li>\n<li><p>读脏数据</p>\n<p>T1 修改一个数据，T2 随后读取这个数据。如果 T1 撤销了这次修改(回滚)，那么 T2 读取的数据是脏数据。（改读改—没改完就读）</p>\n<p><strong>解决：二级封锁协议</strong></p>\n<p>​    在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。</p>\n<p><strong>问题：</strong>由于读完数据即可释放S锁，所以它不能保证可重复读（3）。</p>\n</li>\n<li><p>不可重复读</p>\n<p>T2 读取一个数据，T1 对该数据做了修改。如果 T2 再次读取这个数据，此时读取的结果和第一次读取的结果不同。（读改读—没读完就改）</p>\n<p>在一级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。</p>\n<p>（可以解决不可重复读的问题，因为读 A 时，其它事务不能对 A 加 X 锁，从而避免了在读的期间数据发生改变。）</p>\n</li>\n<li><p>幻影读</p>\n<p>T1 读取某个范围的数据，T2 在这个范围内插入新的数据，T1 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。</p>\n<p><strong>小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</strong></p>\n</li>\n</ul>\n<h3 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h3><ul>\n<li><p>未提交读(read uncommitted)</p>\n</li>\n<li><p>提交读(read committed)</p>\n</li>\n<li><p>可重复读(repeatable read) innodb引擎默认</p>\n</li>\n<li><p>可串行化(serializable)</p>\n<p>以上3种隔离级别都允许对同一条记录进行<code>读-读</code>、<code>读-写</code>、<code>写-读</code>的并发操作，如果我们不允许<code>读-写</code>、<code>写-读</code>的并发操作</p>\n</li>\n</ul>\n<h3 id=\"MVCC\"><a href=\"#MVCC\" class=\"headerlink\" title=\"MVCC\"></a>MVCC</h3><p>多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现==提交读==(RC)和==可重复读==(RR)这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</p>\n<ul>\n<li><p>快照读与当前读</p>\n<p>在==RR级别==中，通过MVCC机制，虽然让数据变得可重复读，但我们读到的数据可能是历史数据，不是数据库最新的数据。这种读取历史数据的方式，我们叫它快照读 (snapshot read)，而读取数据库最新版本数据的方式，叫当前读 (current read)。</p>\n<p>select操作是innodb默认会执行快照读，对于会对数据修改的操作(update、insert、delete)都是采用当前读的模式。</p>\n<p>select的当前读需要手动的加锁：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> ? <span class=\"keyword\">lock</span> <span class=\"keyword\">in</span> <span class=\"keyword\">share</span> <span class=\"keyword\">mode</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">table</span> <span class=\"keyword\">where</span> ? <span class=\"keyword\">for</span> <span class=\"keyword\">update</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>版本链与undo日志</p>\n<p>对于使用<code>InnoDB</code>存储引擎的表来说，它的聚簇索引记录中都包含两个必要的隐藏列：</p>\n<ul>\n<li><code>trx_id</code>：每次对某条聚簇索引记录进行改动时，都会把对应的事务id赋值给<code>trx_id</code>隐藏列。</li>\n<li><code>roll_pointer</code>：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到<code>undo日志</code>中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。</li>\n</ul>\n</li>\n<li><p>MVCC核心思想</p>\n<p>对于表t，假设插入该记录的事务id为<code>80</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT * FROM t;</span><br><span class=\"line\">+<span class=\"comment\">----+--------+</span></span><br><span class=\"line\">| id | c      |</span><br><span class=\"line\">+<span class=\"comment\">----+--------+</span></span><br><span class=\"line\">|  1 | 刘备   |</span><br><span class=\"line\">+<span class=\"comment\">----+--------+</span></span><br><span class=\"line\">1 row in <span class=\"keyword\">set</span> (<span class=\"number\">0.01</span> sec)</span><br></pre></td></tr></table></figure>\n\n<p>则当前版本链如下：</p>\n</li>\n</ul>\n  <img src=\"/blog/2020/08/08/MySQL%E9%94%81%E4%B8%8E%E4%BA%8B%E5%8A%A1/MVCC_mvcc1.png\" alt=\"MVCC_mvcc1\" style=\"zoom:50%;\">\n\n\n\n<p>  假设之后两个<code>id</code>分别为<code>100</code>、<code>200</code>的事务对这条记录进行<code>UPDATE</code>操作，操作流程如下：</p>\n  <img src=\"/blog/2020/08/08/MySQL%E9%94%81%E4%B8%8E%E4%BA%8B%E5%8A%A1/MVCC_版本链.png\" alt=\"MVCC_版本链\" style=\"zoom:50%;\">\n\n\n\n<p>  每次对记录进行改动，都会记录一条<code>undo日志</code>，并对应一个<code>roll_pointer</code>。利用<code>roll_pointer</code>可以将undo日志中该条数据所有改动串起来，形成<code>版本链</code>如下：</p>\n  <img src=\"/blog/2020/08/08/MySQL%E9%94%81%E4%B8%8E%E4%BA%8B%E5%8A%A1/MVCC_mvcc2.png\" alt=\"image-20200804205524358\" style=\"zoom:50%;\">\n\n\n\n\n\n<p>  对于RR级别，第一次执行查询sql时会生成当前事务的一致性视图==read-view==。</p>\n<p>  对于RC级别，每一次执行查询sql时会生成当前事务的一致性视图==read-view==。</p>\n<p>  ReadView由执行查询时所有未提交事务id数组（称之为<code>m_ids</code>，数组里最小的id为min_id）和已创建的最大事务id（max_id）组成，记录列表中最小的事务id为在访问某条记录时有如下规则：</p>\n<p>  注意：m_ids之中为当前未提交数组，之外包括==已提交==事务以及==未来的事务==。</p>\n<ul>\n<li><p>如果被访问版本的<code>trx_id</code>属性值小于min_id，表明生成该版本的事务在生成<code>ReadView</code>前已经提交，所以该版本可以被当前事务访问。</p>\n</li>\n<li><p>如果被访问版本的<code>trx_id</code>属性值大于max_id，表明生成该版本的事务在生成<code>ReadView</code>后才生成，所以该版本不可以被当前事务访问。</p>\n</li>\n<li><p>如果被访问版本的<code>trx_id</code>属性值在min_id与max_id之间，那就需要判断一下<code>trx_id</code>属性值是不是在<code>m_ids</code>列表中，如果在，说明创建<code>ReadView</code>时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建<code>ReadView</code>时生成该版本的事务已经被提交，该版本可以被访问。</p>\n<p>id 在 m_ids 中：表示未提交，不可访问</p>\n<p>id 不在 m_ids 中：</p>\n<ul>\n<li>已提交</li>\n<li>在未来：id &gt; max_id</li>\n</ul>\n</li>\n</ul>\n<p>  <strong>注意：</strong>begin/start transaction 命令并不是一个事务的起点， 在执行到它们之后的第一个==修改==操作InnoDB表的语句，事务才真正启动，才会向mysql申请事务id，mysql内部是严格按照事务的启动顺序来分配事务id的。</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li><p>查看事务隔离级别</p>\n<p>select @@transaction_isolation;</p>\n</li>\n<li><p>查看当前数据库所有表名</p>\n<p>select table_name from information_schema.tables where table_schema=’当前数据库’;</p>\n</li>\n<li><p>显示所有数据库</p>\n<p>show databases;</p>\n</li>\n<li><p>开启事务、提交事务、会滚事务</p>\n<p>start transaction;  、  Commit;   、 Rollback;</p>\n</li>\n</ul>\n<h2 id=\"面试问题补充\"><a href=\"#面试问题补充\" class=\"headerlink\" title=\"面试问题补充\"></a>面试问题补充</h2><ul>\n<li>可重复读如何避免幻读</li>\n</ul>\n","categories":["Mysql"],"tags":["Mysql"]},{"title":"常用Git命令","url":"/blog/2020/08/05/Git%E5%AD%A6%E4%B9%A0/","content":"<h1 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h1><p>本文主要介绍一下常用Git命令。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Git命令学习\"><a href=\"#Git命令学习\" class=\"headerlink\" title=\"Git命令学习\"></a>Git命令学习</h1><h2 id=\"Git基本命令\"><a href=\"#Git基本命令\" class=\"headerlink\" title=\"Git基本命令\"></a>Git基本命令</h2><ul>\n<li><p>初始化本地仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone $&#123;remote_url&#125; #从远程仓库克隆</span><br><span class=\"line\">git init $&#123;repository_name&#125; #初始化本地目录</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从远程分支拉取文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>将文件添加至暂存区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add $&#123;filename&#125; #将一个文件添加至暂存区</span><br><span class=\"line\">git add . #将增、改文件提交至暂存区（不包括删）</span><br><span class=\"line\">git add -u #(--update)将删、改文件提交至暂存区（不包括增）</span><br><span class=\"line\">git add -A #(--all)提交所有修改（增、删、改） </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将文件移出暂存区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git rm --cached $&#123;filename&#125; </span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>将文件提交至本地仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit $&#123;filename&#125; -m $&#123;msg&#125; #提交某一文件</span><br><span class=\"line\">git commit -am $&#123;msg&#125; #提交暂存区所有文件</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>将本地分支推送至远程分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>快速添加、提交、推送</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add -A; git commit -am $&#123;msg&#125;; git push</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看提交历史</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --oneline <span class=\"comment\">#每次提交在一行显示</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph <span class=\"comment\">#显示合并图</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Git分支管理\"><a href=\"#Git分支管理\" class=\"headerlink\" title=\"Git分支管理\"></a>Git分支管理</h2><ul>\n<li><p>查看分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch #查看当前分支</span><br><span class=\"line\">git branch -a #查看所有分支</span><br><span class=\"line\">git branch -avv #查看所有分支详细信息</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git checkout $&#123;branch_name&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>新建分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git branch $&#123;branch_name&#125; #基于当前分支创建新分支</span><br><span class=\"line\">git checkout -b $&#123;branch_name&#125; #创建并切换至分支</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">相当于git branch <span class=\"variable\">$&#123;branch_name&#125;</span>; git checkout <span class=\"variable\">$&#123;branch_name&#125;</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">删除本地分支</span></span><br><span class=\"line\">git branch -d $&#123;branch_name&#125; #--delete 该分支必须完全和它的上游分支merge完成</span><br><span class=\"line\">git branch -D $&#123;branch_name&#125; #--dalete --force 无需merge删除</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">删除远程分支</span></span><br><span class=\"line\">git push origin --delete -d $&#123;branch_name&#125; #该指令也会删除追踪分支</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">如果从网页删除远程分支，追踪分支是不会删除的。,可以通过git fetch origin -p(--prune) branch_name来单独删除追踪分支</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>合并分支</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git merge $&#123;target_branch&#125; #将目标分支合并至当前分支</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>冲突解决</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git merge <span class=\"variable\">$&#123;sourcebranch&#125;</span>    (Merge conflict appears)</span><br><span class=\"line\">git status <span class=\"comment\">#view conflict details &amp; fix conflicts</span></span><br><span class=\"line\">git commit -m <span class=\"variable\">$&#123;msg&#125;</span> <span class=\"comment\">#(add then commit)</span></span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ol>\n<li><p>经常看到<code>origin/master</code>，origin的含义是什么？</p>\n<p><code>origin/master</code>表示远程仓库master分支，其中origin表示的是远程仓库地址的别名，可以使用<code>git remote -v</code>查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git remote -v               </span><br><span class=\"line\">origin    git@git.guazi-corp.com:guazi_we/sale-crm-fe.git (fetch)</span><br><span class=\"line\">origin    git@git.guazi-corp.com:guazi_we/sale-crm-fe.git (push)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>当执行<code>git branch -a</code> 查看所有分支时，会看到这样一条远程分支<code>remotes/origin/HEAD -&gt; origin/master</code>,它表示什么呢？</p>\n<p><code>remotes/origin/HEAD</code> 相当于一个指针，指向<code>origin/master</code>，有了这个指针，想要访问<code>origin/master分支直接可以访问origin。即origin单独使用即可表示</code>origin/master。</p>\n</li>\n<li><p>如何将本地代码关联到远程分支？</p>\n<p>step1: git remote add origin <a href=\"mailto:&#x67;&#x69;&#116;&#x40;&#x78;&#x78;&#x78;&#46;&#x67;&#105;&#x74;\">&#x67;&#x69;&#116;&#x40;&#x78;&#x78;&#x78;&#46;&#x67;&#105;&#x74;</a>  </p>\n<p>Step2: git push –set-upstream origin master</p>\n</li>\n</ol>\n","categories":["Git"],"tags":["Git"]},{"title":"MySQL索引底层数据结构","url":"/blog/2020/08/04/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","content":"<h3 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h3><p>巧妙地使用索引可以显著提升我们的查询效率，本文主要介绍索引底层的数据结构。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"什么是索引\"><a href=\"#什么是索引\" class=\"headerlink\" title=\"什么是索引\"></a>什么是索引</h3><p>索引是一种<strong>有序</strong>的数据结构。</p>\n<h3 id=\"索引数据结构\"><a href=\"#索引数据结构\" class=\"headerlink\" title=\"索引数据结构\"></a>索引数据结构</h3><ul>\n<li><p><strong>二叉树(二叉排序树)</strong></p>\n<p>极端情况退化为链表</p>\n</li>\n<li><p><strong>红黑树(二叉平衡树)</strong></p>\n<p>树的高度高(查找层数高)</p>\n</li>\n<li><p><strong>Hash表</strong></p>\n</li>\n<li><p><strong>B-Tree</strong></p>\n</li>\n</ul>\n<p>对于树形索引结构，查找次数等于树的高度。通常高度越低查找速度更快。</p>\n<p>B-Tree相比于二叉排序树（或二叉平衡树）的优势，每一个节点尽可能放多个索引（这里在节点内部为内存中查找，查找时间可以忽略），这样下一层可以有更多的节点，使得树的高度越小。</p>\n<p><strong>结论：存储相同的数据，每个节点存放的数据越多，整个树的高度越低，查找次数越少。</strong></p>\n<p><img src=\"/blog/2020/08/04/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.png\" alt=\"B树\"></p>\n<p>而Mysql真正选取的是一种优化的B-Tree —&gt; B+Tree。</p>\n<p>B+树与B树的区别：</p>\n<p><img src=\"/blog/2020/08/04/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.png\" alt=\"image-20200724093626358\"></p>\n<ol>\n<li><p>B+树只有叶子结点存放数据，非叶子结点只存索引。</p>\n<p>好处：非叶子结点只存在索引，会使每个非叶子结点存储更多的索引值，整个树的高度</p>\n</li>\n<li><p>B+树叶子结点之间存在指针，可以实现顺序访问。</p>\n</li>\n</ol>\n<h3 id=\"Mysql索引\"><a href=\"#Mysql索引\" class=\"headerlink\" title=\"Mysql索引\"></a>Mysql索引</h3><p>Mysql存储引擎常用InnoDB、MyISAM、是==针对表==而言的</p>\n<h4 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h4><p>索引结构：非聚集索引，主键索引与非主键结构相同</p>\n<p><img src=\"/blog/2020/08/04/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.png\" alt=\"image-20200725103605551\"></p>\n<p>MyISAM表文件</p>\n<ul>\n<li><p>${table_name}.frm 表结构文件</p>\n</li>\n<li><p>${table_name}.myd 表数据文件</p>\n</li>\n<li><p>${table_name}.myi 表索引文件</p>\n</li>\n</ul>\n<h4 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h4><p>索引结构：主键为聚集索引、非主键为非聚集索引（结构与MyISAM相同）</p>\n<ul>\n<li>主键(聚集)索引：</li>\n</ul>\n<p><img src=\"/blog/2020/08/04/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/4.png\" alt=\"image-20200725104217001\"></p>\n<ul>\n<li>非主键(索引)：</li>\n</ul>\n<p><img src=\"/blog/2020/08/04/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.png\" alt=\"image-20200725110338861\"></p>\n<p>​    非主键索引域存放主键值，查找时还需回表至聚集索引中(利用主键)查找数据。</p>\n<p>InnoDB表文件</p>\n<ul>\n<li>${table_name}.frm 表结构文件(高版本Mysql移除？)</li>\n<li>${table_name}.ibd 聚集索引</li>\n</ul>\n<h4 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h4><p><img src=\"/blog/2020/08/04/Mysql%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/6.png\" alt=\"image-20200725111618600\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employees <span class=\"keyword\">where</span> <span class=\"keyword\">name</span> = <span class=\"string\">&#x27;Bill&#x27;</span> <span class=\"keyword\">and</span> age = <span class=\"number\">31</span>;    <span class=\"comment\">#走索引</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employees <span class=\"keyword\">where</span> age = <span class=\"string\">&#x27;30&#x27;</span> <span class=\"keyword\">and</span> <span class=\"keyword\">position</span> = <span class=\"string\">&#x27;dev&#x27;</span>;    <span class=\"comment\">#不走索引</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employees <span class=\"keyword\">where</span> <span class=\"keyword\">position</span> = <span class=\"string\">&#x27;manager;&#x27;</span>    <span class=\"comment\">#不走索引</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> employees <span class=\"keyword\">where</span> age = <span class=\"string\">&#x27;12&#x27;</span> <span class=\"keyword\">and</span> <span class=\"keyword\">position</span> = <span class=\"string\">&#x27;manager&#x27;</span> <span class=\"keyword\">and</span> <span class=\"keyword\">name</span> = <span class=\"string\">&#x27;Bill&#x27;</span>;    <span class=\"comment\">#走索引</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ol>\n<li><p>为什么InnoDB推荐建一个整型自增主键？    </p>\n<p>答：索引查找过程需要比较大小，整型比较大小快；便于B+树的维护(插入)。</p>\n</li>\n<li><p>为什么Mysql不推荐用Hash索引(Mysql可选)？</p>\n<p>答：不支持范围查找</p>\n</li>\n<li><p>为什么InnoDB非主键索引不用聚集索引呢(索引中存放数据)？</p>\n<p>答：一致性和节省空间</p>\n</li>\n</ol>\n","categories":["Mysql"],"tags":["Mysql"]},{"title":"Mockito单元测试","url":"/blog/2020/08/01/Mockito%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/","content":"<h1 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h1><p>本文记录一些使用Mockito单元测试的使用方法。</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">set(String s, List l, <span class=\"keyword\">long</span>, l)</span><br><span class=\"line\">doNothing().when(redisDao).set(Mockito.anyString(), Mockito.anyObject(), Mockito.anyLong(  <span class=\"comment\">//不报异常</span></span><br><span class=\"line\">  </span><br><span class=\"line\">doNothing().when(redisDao).set(Mockito.anyString(), Mockito.anyList(), Mockito.anyLong());   <span class=\"comment\">//报异常</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Tag tag &#x3D; new Tag();</span><br><span class=\"line\">tag.setIsVisible(true);</span><br><span class=\"line\">tags.add(tag);</span><br><span class=\"line\">Mockito.when(redisDao.get(Mockito.anyString())).thenReturn(tags);</span><br><span class=\"line\">tags &#x3D; null;</span><br><span class=\"line\">Mockito.when(redisDao.get(Mockito.anyString())).thenReturn(tags);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Mockito.when(shareTemplateMapper.selectById(<span class=\"number\">1</span>)).thenThrow(<span class=\"keyword\">new</span> NullPointerException());</span><br><span class=\"line\">Mockito.when(shareTemplateMapper.selectById(<span class=\"number\">1</span>)).thenReturn(shareTemplate);<span class=\"comment\">//报错</span></span><br><span class=\"line\">Mockito.when(shareTemplateMapper.selectById(<span class=\"number\">2</span>)).thenReturn(shareTemplate);<span class=\"comment\">//不报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">Mockito.when(shareTemplateMapper.updateById(shareTemplate)).thenReturn(<span class=\"number\">1</span>);</span><br><span class=\"line\">Mockito.when(shareTemplateMapper.updateById(shareTemplate)).thenThrow(<span class=\"keyword\">new</span> NullPointerException());<span class=\"comment\">//不报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","categories":["Java"],"tags":["单元测试"]}]